/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// canvasReferencePlugin.ts
var canvasReferencePlugin_exports = {};
__export(canvasReferencePlugin_exports, {
  default: () => CanvasReferencePlugin
});
module.exports = __toCommonJS(canvasReferencePlugin_exports);
var import_obsidian = require("obsidian");

// node_modules/monkey-around/mjs/index.js
function around(obj, factories) {
  const removers = Object.keys(factories).map((key) => around1(obj, key, factories[key]));
  return removers.length === 1 ? removers[0] : function() {
    removers.forEach((r) => r());
  };
}
function around1(obj, method, createWrapper) {
  const original = obj[method], hadOwn = obj.hasOwnProperty(method);
  let current = createWrapper(original);
  if (original)
    Object.setPrototypeOf(current, original);
  Object.setPrototypeOf(wrapper, current);
  obj[method] = wrapper;
  return remove;
  function wrapper(...args) {
    if (current === original && obj[method] === wrapper)
      remove();
    return current.apply(this, args);
  }
  function remove() {
    if (obj[method] === wrapper) {
      if (hadOwn)
        obj[method] = original;
      else
        delete obj[method];
    }
    if (current === original)
      return;
    current = original;
    Object.setPrototypeOf(wrapper, original || Function);
  }
}

// canvasReferencePlugin.ts
var CanvasReferencePlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.patchWorkspaceLeaf();
    this.patchEditorSuggest();
    this.registerCommands();
  }
  onunload() {
  }
  registerCommands() {
    this.addCommand({
      id: "copy-canvas-card-reference",
      name: "Copy Canvas Card Reference",
      checkCallback: (checking) => {
        var _a;
        const canvasView = this.app.workspace.getActiveViewOfType(import_obsidian.ItemView);
        if ((canvasView == null ? void 0 : canvasView.getViewType()) === "canvas") {
          if (!checking) {
            const canvas = canvasView.canvas;
            const selection = canvas.selection;
            if (selection.size !== 1)
              return;
            const node = selection.values().next().value;
            const text = "[[" + ((_a = canvasView.file) == null ? void 0 : _a.path) + "#^" + node.id + "]]";
            navigator.clipboard.writeText(text);
          }
          return true;
        }
      }
    });
  }
  patchWorkspaceLeaf() {
    this.register(around(import_obsidian.WorkspaceLeaf.prototype, {
      openFile: (old) => async function(file, state) {
        var _a;
        await old.call(this, file, state);
        if (file.extension === "canvas" && ((_a = state == null ? void 0 : state.eState) == null ? void 0 : _a.subpath)) {
          const canvas = this.view.canvas;
          if (!canvas)
            return;
          const id = state.eState.subpath.replace("#^", "");
          const node = canvas.nodes.get(id);
          if (!node)
            return;
          canvas.selectOnly(node);
          canvas.zoomToSelection();
        }
      }
    }));
  }
  patchEditorSuggest() {
    const getNodesFromCanvas = async (canvasFile) => {
      const canvasFileContent = await app.vault.cachedRead(canvasFile);
      const canvasFileData = JSON.parse(canvasFileContent);
      return canvasFileData.nodes;
    };
    const suggests = app.workspace.editorSuggest.suggests;
    const fileSuggest = suggests.find((suggest) => suggest.mode === "file");
    if (!fileSuggest)
      return;
    const fileSuggestConstructor = fileSuggest.constructor;
    const uninstaller = around(fileSuggestConstructor.prototype, {
      getSuggestions: (next) => async function(context) {
        const result = await next.call(this, context);
        if (this.mode === "file")
          return result;
        if (context.query.lastIndexOf(".canvas") !== -1 && (this.mode === "block" || this.mode === "heading")) {
          const path = context.query.substring(0, context.query.lastIndexOf(".canvas") + 7);
          const canvasFile = app.metadataCache.getFirstLinkpathDest(path, context.file ? context.file.path : "");
          if (!canvasFile)
            return result;
          const nodes = await getNodesFromCanvas(canvasFile);
          if (!nodes)
            return result;
          const suggestions = [];
          const cM = /\u00A0/g;
          let inputStr = "";
          if (this.mode === "heading") {
            inputStr = context.query.replace(cM, " ").normalize("NFC").split("#")[1];
          } else if (this.mode === "block") {
            inputStr = context.query.replace(cM, " ").normalize("NFC").split("^")[1];
          }
          const query = (0, import_obsidian.prepareFuzzySearch)(inputStr);
          let textNodes;
          if (this.mode === "heading")
            textNodes = nodes.filter((node) => node.label !== void 0);
          else
            textNodes = nodes.filter((node) => node.text !== void 0);
          textNodes.forEach((node) => {
            var _a, _b, _c, _d;
            const queryResult = query((_a = node == null ? void 0 : node.text) != null ? _a : node == null ? void 0 : node.label);
            if (queryResult !== null) {
              suggestions.push({
                content: (_b = node.text) != null ? _b : node.label,
                display: ((_c = node.text) != null ? _c : node.label).replace(/\n/g, " "),
                path,
                type: "block",
                file: canvasFile,
                node: {
                  id: node.id,
                  type: "paragraph",
                  position: void 0,
                  children: [{
                    type: "text",
                    value: (_d = node.text) != null ? _d : node.label,
                    position: void 0
                  }]
                },
                idMatch: queryResult.matches,
                matches: null,
                score: queryResult.score
              });
            }
          });
          return suggestions.length > 0 ? suggestions : result;
        }
        return result;
      }
    });
    this.register(uninstaller);
  }
};
